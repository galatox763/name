-- Load the Orion library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = "ZlyzoxX's Hub", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

-- Create tabs for the GUI
local MainTab = Window:MakeTab({
    Name = "üè† Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

MainTab:AddButton({
    Name = "üéÄResetüéÄ",
    Callback = function()
        local player = game.Players.LocalPlayer
        if player and player.Character then
            player.Character:BreakJoints()
            OrionLib:MakeNotification({
                Name = "Character Reset",
                Content = "Your character has been reset",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end
})

-- Discord Webhook Functions
function SendMessage(url, message)
    local http = game:GetService("HttpService")
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local data = {
        ["content"] = message
    }
    local body = http:JSONEncode(data)
    local response = request({
        Url = url,
        Method = "POST",
        Headers = headers,
        Body = body
    })
    print("Sent")
end

function SendMessageEMBED(url, embed)
    local http = game:GetService("HttpService")
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local data = {
        ["embeds"] = {
            {
                ["title"] = embed.title,
                ["description"] = embed.description,
                ["color"] = embed.color,
                ["fields"] = embed.fields,
                ["footer"] = {
                    ["text"] = embed.footer.text
                }
            }
        }
    }
    local body = http:JSONEncode(data)
    local response = request({
        Url = url,
        Method = "POST",
        Headers = headers,
        Body = body
    })
    print("Sent")
end

-- Add Bug Report Textbox to Main Tab
MainTab:AddTextbox({
    Name = "Report Bugs",
    Default = "",
    TextDisappear = false,
    Callback = function(Value)
        if Value and Value ~= "" then
            -- Get player information
            local player = game.Players.LocalPlayer
            local playerName = player and player.Name or "Unknown Player"
            
            -- Webhook URL
            local webhookUrl = "https://discord.com/api/webhooks/1325242945569292460/ibx-X6vKnOo917T63vMSJl0zU3UfD5tktmDfpcFGa5gqR17HQG49sUygsn6_vORDIbiW"
            
            -- Send simple message
            local fullMessage = string.format("**Bug Report**\nPlayer: %s\nMessage: %s", playerName, Value)
            
            -- Attempt to send
            pcall(function()
                SendMessage(webhookUrl, fullMessage)
                
                -- Notification
                OrionLib:MakeNotification({
                    Name = "Bug Report",
                    Content = "Bug report sent successfully!",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
            end)
        end
    end
})

-- Global Loop Breaker Utility
local LoopBreaker = {}

-- Centralized list of known automation scripts and their stop mechanisms
LoopBreaker.automationScripts = {
    {
        name = "MilkAutomation",
        stopFunction = function()
            -- Directly set stop flags if they exist
            if _G.STOP_MILK_CLICK ~= nil then
                _G.STOP_MILK_CLICK = true
            end
            
            if _G.STOP_MILK_EQUIP ~= nil then
                _G.STOP_MILK_EQUIP = true
            end
        end
    },
    {
        name = "ScientistAutoClicker",
        stopFunction = function()
            -- Stop scientist auto-clicking
            if _G.isAutoClicking ~= nil then
                _G.isAutoClicking = false
            end
            
            -- Attempt to cancel existing token
            pcall(function()
                if autoClickCancellationToken and autoClickCancellationToken.cancel then
                    autoClickCancellationToken:cancel()
                end
            end)
        end
    }
}

-- Advanced loop breaking function
function LoopBreaker.breakAllLoops()
    print("[LOOP BREAKER] Initiating emergency loop termination...")
    
    -- Stop all known automation scripts
    for _, script in ipairs(LoopBreaker.automationScripts) do
        local success, err = pcall(script.stopFunction)
        if not success then
            warn("[LOOP BREAKER] Error stopping " .. script.name .. ": " .. tostring(err))
        else
            print("[LOOP BREAKER] Stopped " .. script.name)
        end
    end
    
    -- Attempt to cancel all running tasks
    for i = 1, 50 do  -- Reduced iteration to prevent potential hang
        local success, result = pcall(function()
            task.cancel(task.spawn(function() end))
        end)
        if not success then break end
    end
    
    print("[LOOP BREAKER] Emergency termination complete.")
end

-- Modify the existing tab creation to include the break loops button
local function addBreakLoopsButton(tab)
    local breakLoopsButton = Instance.new("TextButton")
    breakLoopsButton.Name = "BreakLoopsButton"
    breakLoopsButton.Text = "üõë Break All Loops"
    breakLoopsButton.Font = Enum.Font.GothamBold
    breakLoopsButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    breakLoopsButton.BackgroundColor3 = Color3.fromRGB(231, 76, 60)  -- Red color
    breakLoopsButton.Size = UDim2.new(1, -10, 0, 40)
    breakLoopsButton.Position = UDim2.new(0, 5, 1, -50)  -- Bottom of the tab
    
    -- Style the button
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.2, 0)
    uiCorner.Parent = breakLoopsButton
    
    -- Button click event
    breakLoopsButton.MouseButton1Click:Connect(function()
        LoopBreaker.breakAllLoops()
    end)
    
    breakLoopsButton.Parent = tab
end

-- Attempt to add the button to the existing MainTab
pcall(function()
    addBreakLoopsButton(MainTab)
end)

-- Modify Orion Library Tab Creation to Include Search
local originalAddTab = OrionLib.AddTab
OrionLib.AddTab = function(self, Config)
    local tab = originalAddTab(self, Config)
    
    -- Create search box
    local searchBox = Instance.new("TextBox")
    searchBox.Name = "SearchBox"
    searchBox.Size = UDim2.new(1, -20, 0, 35)
    searchBox.Position = UDim2.new(0, 10, 0, 10)
    searchBox.PlaceholderText = "üîç Search functions..."
    searchBox.Text = ""
    searchBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    searchBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    searchBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    searchBox.BorderSizePixel = 0
    searchBox.Font = Enum.Font.Gotham
    searchBox.TextSize = 14
    
    -- Rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.2, 0)
    uiCorner.Parent = searchBox
    
    -- Find the scrolling frame in the tab
    local function findScrollFrame(frame)
        for _, child in ipairs(frame:GetDescendants()) do
            if child:IsA("ScrollingFrame") then
                return child
            end
        end
        return nil
    end
    
    -- Search functionality
    searchBox.Changed:Connect(function(property)
        if property ~= "Text" then return end
        
        local scrollFrame = findScrollFrame(tab.Frame)
        if not scrollFrame then return end
        
        local searchTerm = string.lower(searchBox.Text)
        
        -- Iterate through scroll frame children
        for _, child in ipairs(scrollFrame:GetChildren()) do
            if child:IsA("Frame") then
                local nameLabel = child:FindFirstChild("Title") or child:FindFirstChild("Name")
                if nameLabel then
                    local elementName = string.lower(nameLabel.Text)
                    child.Visible = searchTerm == "" or elementName:find(searchTerm)
                end
            end
        end
    end)
    
    -- Add search box to tab
    searchBox.Parent = tab.Frame
    
    return tab
end

-- Reinitialize the library to apply changes
OrionLib:Init()

local TpTab = Window:MakeTab({
    Name = "Tp utilities",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local RandomTab = Window:MakeTab({
    Name = "Random",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local GameScriptsTab = Window:MakeTab({
    Name = "Game Scripts",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local DaycareTab = Window:MakeTab({
    Name = "Daycare",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

DaycareTab:AddToggle({
    Name = "Anti-Grab",
    Default = false,
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        local antiGrabConnection
        local lastCheckTime = 0
        
        if Value then
            antiGrabConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local currentTime = tick()
                if currentTime - lastCheckTime < 0.7 then return end
                
                if player and player.Character then
                    -- Search through entire workspace for potential ropes
                    local function searchForRopes(parent)
                        for _, child in ipairs(parent:GetDescendants()) do
                            -- Check for various rope-like objects
                            if child.Name:lower():find("rope") or 
                               child.Name:lower():find("cable") or 
                               child:IsA("Constraint") then
                                -- Try to find connection to player
                                local success, err = pcall(function()
                                    -- Check if the rope is somehow connected to the player
                                    if child:IsDescendantOf(player.Character) or 
                                       player.Character:IsDescendantOf(child) then
                                        player.Character:BreakJoints()
                                    end
                                end)
                            end
                        end
                    end
                    
                    -- Search workspace and character for ropes
                    searchForRopes(workspace)
                    searchForRopes(player.Character)
                    
                    lastCheckTime = currentTime
                end
            end)
        else
            -- Disconnect the connection when toggle is turned off
            if antiGrabConnection then
                antiGrabConnection:Disconnect()
            end
        end
    end
})

-- Variables for teleportation and speed adjustment
local teleportKeyword = ""
local tweenKeyword = ""
local listening = false
local speedListening = false
local connections = {}
local speedConnections = {}
local minTweenSpeed = 1000
local defaultSpeed = 16

-- Function to teleport to a player when a keyword is spoken
local function teleportOnKeyword()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    local function onPlayerChatted(player, message)
        if listening and string.lower(message) == string.lower(teleportKeyword) then
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local targetPosition = player.Character.HumanoidRootPart.Position
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
            end
        end
    end

    for _, player in pairs(Players:GetPlayers()) do
        local connection = player.Chatted:Connect(function(message)
            onPlayerChatted(player, message)
        end)
        table.insert(connections, connection)
    end

    local connection = Players.PlayerAdded:Connect(function(newPlayer)
        local connection = newPlayer.Chatted:Connect(function(message)
            onPlayerChatted(newPlayer, message)
        end)
        table.insert(connections, connection)
    end)
    table.insert(connections, connection)
end

-- Function to tween to a player when a keyword is spoken
local function tweenToPlayer()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local TweenService = game:GetService("TweenService")

    local function onPlayerChatted(player, message)
        if listening and string.lower(message) == string.lower(tweenKeyword) then
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local targetPosition = player.Character.HumanoidRootPart.Position
                local distance = (targetPosition - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                local tweenTime = math.max(1, distance / minTweenSpeed)
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local tweenInfo = TweenInfo.new(tweenTime, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                    local tweenGoal = {CFrame = CFrame.new(targetPosition)}
                    local tween = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, tweenInfo, tweenGoal)
                    tween:Play()
                end
            end
        end
    end

    for _, player in pairs(Players:GetPlayers()) do
        local connection = player.Chatted:Connect(function(message)
            onPlayerChatted(player, message)
        end)
        table.insert(connections, connection)
    end

    local connection = Players.PlayerAdded:Connect(function(newPlayer)
        local connection = newPlayer.Chatted:Connect(function(message)
            onPlayerChatted(newPlayer, message)
        end)
        table.insert(connections, connection)
    end)
    table.insert(connections, connection)
end

-- Function to adjust player speed based on chat commands
local function adjustSpeed()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    local function onPlayerChatted(player, message)
        if speedListening then
            local args = message:split(" ")
            if args[1] == "!speed" and tonumber(args[2]) then
                local speed = tonumber(args[2])
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                    LocalPlayer.Character.Humanoid.WalkSpeed = speed
                    print("Speed changed to: " .. tostring(speed))
                end
            elseif args[1] == "!speed" and args[2] == "reset" then
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                    LocalPlayer.Character.Humanoid.WalkSpeed = defaultSpeed
                    print("Speed reset to default value: " .. tostring(defaultSpeed))
                end
            end
        end
    end

    for _, player in pairs(Players:GetPlayers()) do
        local connection = player.Chatted:Connect(function(message)
            onPlayerChatted(player, message)
        end)
        table.insert(speedConnections, connection)
    end

    local connection = Players.PlayerAdded:Connect(function(newPlayer)
        local connection = newPlayer.Chatted:Connect(function(message)
            onPlayerChatted(newPlayer, message)
        end)
        table.insert(speedConnections, connection)
    end)
    table.insert(speedConnections, connection)
end

-- Function to stop listening for speed commands
local function stopSpeedListening()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    speedListening = false
    for _, connection in ipairs(speedConnections) do
        connection:Disconnect()
    end
    speedConnections = {}
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.WalkSpeed = defaultSpeed
        print("Speed reset to default value: " .. tostring(defaultSpeed))
    end
end

-- Function to stop listening for teleportation commands
local function stopListening()
    listening = false
    for _, connection in ipairs(connections) do
        connection:Disconnect()
    end
    connections = {}
end

-- Toggle for teleportation on keyword
TpTab:AddToggle({
    Name = "Teleport on keyword",
    Default = false,
    Callback = function(Value)
        print("Toggle 1: " .. tostring(Value))
        listening = Value
        if Value == true then
            teleportOnKeyword()
        else
            stopListening()
        end
    end    
})

-- Textbox for teleportation keyword
TpTab:AddTextbox({
    Name = "Keyword",
    Default = "",
    TextDisappear = true,
    Callback = function(Value)
        teleportKeyword = Value
        print("Keyword set to: " .. teleportKeyword)
    end
})

-- Toggle for tween teleportation on keyword
TpTab:AddToggle({
    Name = "Tween Teleport on keyword",
    Default = false,
    Callback = function(Value)
        print("Toggle 2: " .. tostring(Value))
        listening = Value
        if Value == true then
            tweenToPlayer()
        else
            stopListening()
        end
    end    
})

-- Textbox for tween keyword
TpTab:AddTextbox({
    Name = "Tween Keyword",
    Default = "",
    TextDisappear = true,
    Callback = function(Value)
        tweenKeyword = Value
        print("Tween Keyword set to: " .. tweenKeyword)
    end
})

-- Toggle for speed adjustment commands
RandomTab:AddToggle({
    Name = "!speed [number] / !speed reset",
    Default = false,
    Callback = function(Value)
        print("Command Toggle 1: " .. tostring(Value))
        speedListening = Value
        if Value == true then
            adjustSpeed()
        else
            stopSpeedListening()
        end
    end    
})

-- Button to load Lunar Bot Chat AI
RandomTab:AddButton({
    Name = "Lunar Bot Chat AI",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/probablYnicKxD/ProjectLunar/main/LunarBot/Source.lua"))()
    end
})

-- Button to execute Jerk Off Tool script
RandomTab:AddButton({
    Name = "Execute Jerk Off Tool Script",
    Callback = function()
        loadstring(game:HttpGet("https://pastefy.app/wa3v2Vgm/raw"))()
    end
})

-- Button to execute Nameless Admin script
RandomTab:AddButton({
    Name = "Nameless Admin",
    Callback = function()
        loadstring(game:HttpGet("https://github.com/FilteringEnabled/NamelessAdmin/blob/main/Source?raw=true"))()
    end
})

-- Game Scripts Tab button to execute Speed Hub X
GameScriptsTab:AddButton({
    Name = "Execute Speed Hub X",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/AhmadV99/Speed-Hub-X/main/Speed%20Hub%20X.lua", true))()
    end
})

-- Button to execute Telekinesis Script
RandomTab:AddButton({
    Name = "Execute Telekinesis Script",
    Callback = function()
        -- Telekinesis script code (omitted for brevity)
    end
})

-- Add Infinite Yield button in the Random tab
RandomTab:AddButton({
    Name = "Infinite Yield",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end
})

-- Add AFEM emotes button to Random tab
RandomTab:AddButton({
    Name = "AFEM emotes",
    Callback = function()
        loadstring(game:HttpGet("https://yarhm.goteamst.com/scr?channel=afem", false))()
    end
})

-- Add Universe Viewer button to Random tab
RandomTab:AddButton({
    Name = "Universe Viewer",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/ltseverydayyou/uuuuuuu/main/Universe%20Viewer"))();
    end
})

-- Milk Section
local MilkSection = DaycareTab:AddSection({
    Name = "ü•õ MILK ü•õ"
})

-- Variable to control the auto-click loop
local autoClickMilk = false
local milkClickThread

MilkSection:AddToggle({
    Name = "Auto Click Milk",
    Default = false,
    Callback = function(Value)
        autoClickMilk = Value

        if autoClickMilk then
            -- Start the auto-click loop in a new thread
            milkClickThread = coroutine.create(function()
                while autoClickMilk do
                    local clickDetector = nil

                    -- Method 1: Direct path
                    local storeFreezer = workspace:FindFirstChild("Store Freezer")
                    if storeFreezer then
                        local milk = storeFreezer:FindFirstChild("Milk")
                        if milk then
                            clickDetector = milk:FindFirstChildOfClass("ClickDetector")
                        end
                    end

                    -- Method 2: Search entire workspace if direct path fails
                    if not clickDetector then
                        for _, v in pairs(workspace:GetDescendants()) do
                            if v:IsA("ClickDetector") and 
                               (string.lower(v.Parent.Name):find("milk") or 
                                string.lower(v.Parent.Parent.Name):find("milk")) then
                                clickDetector = v
                                break
                            end
                        end
                    end

                    -- Attempt to click
                    if clickDetector then
                        fireclickdetector(clickDetector)
                    end

                    -- Wait before the next iteration
                    wait(0.1)
                end
            end)
            coroutine.resume(milkClickThread)
        end
    end
})

-- Variable to control the auto equip and drop loop
local autoEquipDropMilk = false
local milkEquipDropThread

MilkSection:AddToggle({
    Name = "Auto Equip & Drop Milk",
    Default = false,
    Callback = function(Value)
        autoEquipDropMilk = Value

        if autoEquipDropMilk then
            -- Start the auto equip and drop loop in a new thread
            milkEquipDropThread = coroutine.create(function()
                while autoEquipDropMilk do
                    local player = game.Players.LocalPlayer
                    local backpack = player.Backpack
                    local character = player.Character
                    
                    -- Check both backpack and character for milk tools
                    local function dropMilkTool(tool)
                        -- Unequip current tool if any
                        local currentTool = character:FindFirstChildWhichIsA("Tool")
                        if currentTool then
                            currentTool.Parent = backpack
                        end
                        
                        -- Equip milk tool
                        tool.Parent = character
                        
                        -- Immediately drop the milk tool
                        tool.Parent = workspace
                    end
                    
                    -- Check backpack
                    for _, tool in pairs(backpack:GetChildren()) do
                        if string.lower(tool.Name):find("milk") then
                            dropMilkTool(tool)
                            break
                        end
                    end
                    
                    -- Check character (in case milk was picked up)
                    for _, tool in pairs(character:GetChildren()) do
                        if string.lower(tool.Name):find("milk") then
                            dropMilkTool(tool)
                            break
                        end
                    end

                    -- Wait before the next iteration
                    wait(0.1)
                end
            end)
            coroutine.resume(milkEquipDropThread)
        end
    end
})

-- Auto Click Functions for Various ClickDetectors
local autoClickPopsicle = false
local autoClickSandwich = false
local autoClickMedKit = false
local autoClickStar = false
local clickDetectorAutoClickSpeed = 0.1

--[[
    =====================
    CLICK DETECTOR FUNCTIONS
    =====================
]]

-- Auto Click Popsicle Function
local function autoClickPopsicleFunc()
    local clickDetector = nil
    
    -- Method 1: Direct path
    local storeFreezer = workspace:FindFirstChild("Store Freezer")
    if storeFreezer then
        local popsicle = storeFreezer:FindFirstChild("Popsicle")
        if popsicle then
            clickDetector = popsicle:FindFirstChildOfClass("ClickDetector")
        end
    end
    
    -- Method 2: Search entire workspace if direct path fails
    if not clickDetector then
        for _, v in pairs(workspace:GetDescendants()) do
            if v:IsA("ClickDetector") and 
               (string.lower(v.Parent.Name):find("popsicle") or 
                string.lower(v.Parent.Parent.Name):find("popsicle")) then
                clickDetector = v
                break
            end
        end
    end
    
    -- Attempt to click
    if clickDetector then
        fireclickdetector(clickDetector)
    end
end

-- Auto Click Sandwich Function
local function autoClickSandwichFunc()
    local clickDetector = nil
    
    -- Method 1: Direct path
    local storeFreezer = workspace:FindFirstChild("Store Freezer")
    if storeFreezer then
        local sandwich = storeFreezer:FindFirstChild("Sandwich")
        if sandwich then
            clickDetector = sandwich:FindFirstChildOfClass("ClickDetector")
        end
    end
    
    -- Method 2: Search entire workspace if direct path fails
    if not clickDetector then
        for _, v in pairs(workspace:GetDescendants()) do
            if v:IsA("ClickDetector") and 
               (string.lower(v.Parent.Name):find("sandwich") or 
                string.lower(v.Parent.Parent.Name):find("sandwich")) then
                clickDetector = v
                break
            end
        end
    end
    
    -- Attempt to click
    if clickDetector then
        fireclickdetector(clickDetector)
    end
end

-- Auto Click Med-Kit Function
local function autoClickMedKitFunc()
    local clickDetector = nil
    
    -- Method 1: Direct path
    local chalkShelf = workspace:FindFirstChild("ChalkShelf")
    if chalkShelf then
        local medKit = chalkShelf:FindFirstChild("Med-Kit")
        if medKit then
            clickDetector = medKit:FindFirstChildOfClass("ClickDetector")
        end
    end
    
    -- Method 2: Search entire workspace if direct path fails
    if not clickDetector then
        for _, v in pairs(workspace:GetDescendants()) do
            if v:IsA("ClickDetector") and 
               (string.lower(v.Parent.Name):find("med[-]?kit") or 
                string.lower(v.Parent.Parent.Name):find("med[-]?kit")) then
                clickDetector = v
                break
            end
        end
    end
    
    -- Attempt to click
    if clickDetector then
        fireclickdetector(clickDetector)
    end
end

-- Auto Click Star Function
local function autoClickStarFunc()
    local clickDetector = nil
    
    -- Method 1: Direct path
    local chalkShelf = workspace:FindFirstChild("ChalkShelf")
    if chalkShelf then
        local star = chalkShelf:FindFirstChild("Star")
        if star then
            clickDetector = star:FindFirstChildOfClass("ClickDetector")
        end
    end
    
    -- Method 2: Search entire workspace if direct path fails
    if not clickDetector then
        for _, v in pairs(workspace:GetDescendants()) do
            if v:IsA("ClickDetector") and 
               (string.lower(v.Parent.Name):find("star") or 
                string.lower(v.Parent.Parent.Name):find("star")) then
                clickDetector = v
                break
            end
        end
    end
    
    -- Attempt to click
    if clickDetector then
        fireclickdetector(clickDetector)
    end
end

-- Click Detector Section
local ClickDetectorSection = DaycareTab:AddSection({
    Name = "üéØ CLICK DETECTORS üéØ"
})

ClickDetectorSection:AddToggle({
    Name = "Auto Click Popsicle",
    Default = false,
    Callback = function(Value)
        autoClickPopsicle = Value
        
        spawn(function()
            while autoClickPopsicle do
                autoClickPopsicleFunc()
                wait(clickDetectorAutoClickSpeed)
            end
        end)
    end
})

ClickDetectorSection:AddButton({
    Name = "Click Popsicle",
    Callback = function()
        autoClickPopsicleFunc()
    end
})

ClickDetectorSection:AddToggle({
    Name = "Auto Click Sandwich",
    Default = false,
    Callback = function(Value)
        autoClickSandwich = Value
        
        spawn(function()
            while autoClickSandwich do
                autoClickSandwichFunc()
                wait(clickDetectorAutoClickSpeed)
            end
        end)
    end
})

ClickDetectorSection:AddButton({
    Name = "Click Sandwich",
    Callback = function()
        autoClickSandwichFunc()
    end
})

ClickDetectorSection:AddToggle({
    Name = "Auto Click Med-Kit",
    Default = false,
    Callback = function(Value)
        autoClickMedKit = Value
        
        spawn(function()
            while autoClickMedKit do
                autoClickMedKitFunc()
                wait(clickDetectorAutoClickSpeed)
            end
        end)
    end
})

ClickDetectorSection:AddButton({
    Name = "Click Med-Kit",
    Callback = function()
        autoClickMedKitFunc()
    end
})

ClickDetectorSection:AddToggle({
    Name = "Auto Click Star",
    Default = false,
    Callback = function(Value)
        autoClickStar = Value
        
        spawn(function()
            while autoClickStar do
                autoClickStarFunc()
                wait(clickDetectorAutoClickSpeed)
            end
        end)
    end
})

ClickDetectorSection:AddButton({
    Name = "Click Star",
    Callback = function()
        autoClickStarFunc()
    end
})

ClickDetectorSection:AddSlider({
    Name = "Auto Click Speed",
    Min = 0.01,
    Max = 1,
    Increment = 0.01,
    Default = 0.1,
    Callback = function(Value)
        clickDetectorAutoClickSpeed = Value
    end
})

-- Become Scientist Variables
local autoClickScientist = false
local scientistAutoClickSpeed = 0.1

-- Become Scientist Function
local function autoClickScientistFunc()
    local clickDetector = nil
    
    -- Search entire workspace for Scientist ClickDetector
    for _, v in pairs(workspace:GetDescendants()) do
        if v.Name == "BecomeScientistButton" then
            local button = v:FindFirstChild("Button")
            if button then
                clickDetector = button:FindFirstChildOfClass("ClickDetector")
                if clickDetector then
                    break
                end
            end
        end
    end
    
    -- Attempt to click
    if clickDetector then
        -- Multiple click methods
        pcall(function()
            clickDetector:MouseClick()
        end)
        
        -- Additional click method
        if fireclickdetector then
            pcall(function() 
                fireclickdetector(clickDetector) 
            end)
        end
    end
end

-- Become Scientist Section
local BecomeScientistSection = DaycareTab:AddSection({
    Name = "üî• Become Scientist üî•"
})

BecomeScientistSection:AddToggle({
    Name = "Auto Click Scientist",
    Default = false,
    Callback = function(Value)
        autoClickScientist = Value
        
        spawn(function()
            local isRunning = true
            while isRunning do
                if not autoClickScientist then
                    isRunning = false
                    break
                end
                
                -- Check if player is in Scientist team
                local player = game.Players.LocalPlayer
                local team = player.Team
                
                if team and team.Name ~= "Scientists" then
                    autoClickScientistFunc()
                else
                    isRunning = false
                    break
                end
                
                wait(scientistAutoClickSpeed)
            end
        end)
    end
})

BecomeScientistSection:AddButton({
    Name = "Click Scientist",
    Callback = function()
        autoClickScientistFunc()
    end
})

BecomeScientistSection:AddSlider({
    Name = "Auto Click Speed",
    Min = 0.01,
    Max = 1,
    Increment = 0.01,
    Default = 0.1,
    Callback = function(Value)
        scientistAutoClickSpeed = Value
    end
})

-- ChalkShelf Item Variables
local autoClickFireExtinguisher = false
local autoClickWateringCan = false
local autoClickTeddi = false
local autoClickBouncy = false

local chalkShelfAutoClickSpeed = 0.1

-- Auto Click Fire Extinguisher Function
local function autoClickFireExtinguisherFunc()
    local clickDetector = nil
    
    -- Search entire workspace for Fire Extinguisher ClickDetector
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("ClickDetector") and 
           (string.lower(v.Parent.Name):find("fire extinguisher") or 
            string.lower(v.Parent.Parent.Name):find("fire extinguisher")) then
            clickDetector = v
            break
        end
    end
    
    -- Attempt to click
    if clickDetector then
        fireclickdetector(clickDetector)
    end
end

-- Auto Click Watering Can Function
local function autoClickWateringCanFunc()
    local clickDetector = nil
    
    -- Search entire workspace for Watering Can ClickDetector
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("ClickDetector") and 
           (string.lower(v.Parent.Name):find("watering can") or 
            string.lower(v.Parent.Parent.Name):find("watering can")) then
            clickDetector = v
            break
        end
    end
    
    -- Attempt to click
    if clickDetector then
        fireclickdetector(clickDetector)
    end
end

-- Auto Click Teddi Function
local function autoClickTeddiFunc()
    local clickDetector = nil
    
    -- Search entire workspace for Teddi ClickDetector
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("ClickDetector") and 
           (string.lower(v.Parent.Name):find("teddi") or 
            string.lower(v.Parent.Parent.Name):find("teddi")) then
            clickDetector = v
            break
        end
    end
    
    -- Attempt to click
    if clickDetector then
        fireclickdetector(clickDetector)
    end
end

-- Auto Click Bouncy Function
local function autoClickBouncyFunc()
    local clickDetector = nil
    
    -- Search entire workspace for Bouncy ClickDetector
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("ClickDetector") and 
           (string.lower(v.Parent.Name):find("bouncy") or 
            string.lower(v.Parent.Parent.Name):find("bouncy")) then
            clickDetector = v
            break
        end
    end
    
    -- Attempt to click
    if clickDetector then
        fireclickdetector(clickDetector)
    end
end

-- ChalkShelf Section
local ChalkShelfSection = DaycareTab:AddSection({
    Name = "üß™ ChalkShelf Items üß™"
})

-- Fire Extinguisher Toggle and Button
ChalkShelfSection:AddToggle({
    Name = "Auto Click Fire Extinguisher",
    Default = false,
    Callback = function(Value)
        autoClickFireExtinguisher = Value
        
        spawn(function()
            while autoClickFireExtinguisher do
                autoClickFireExtinguisherFunc()
                wait(chalkShelfAutoClickSpeed)
            end
        end)
    end
})

ChalkShelfSection:AddButton({
    Name = "Click Fire Extinguisher",
    Callback = function()
        autoClickFireExtinguisherFunc()
    end
})

-- Watering Can Toggle and Button
ChalkShelfSection:AddToggle({
    Name = "Auto Click Watering Can",
    Default = false,
    Callback = function(Value)
        autoClickWateringCan = Value
        
        spawn(function()
            while autoClickWateringCan do
                autoClickWateringCanFunc()
                wait(chalkShelfAutoClickSpeed)
            end
        end)
    end
})

ChalkShelfSection:AddButton({
    Name = "Click Watering Can",
    Callback = function()
        autoClickWateringCanFunc()
    end
})

-- Teddi Toggle and Button
ChalkShelfSection:AddToggle({
    Name = "Auto Click Teddi",
    Default = false,
    Callback = function(Value)
        autoClickTeddi = Value
        
        spawn(function()
            while autoClickTeddi do
                autoClickTeddiFunc()
                wait(chalkShelfAutoClickSpeed)
            end
        end)
    end
})

ChalkShelfSection:AddButton({
    Name = "Click Teddi",
    Callback = function()
        autoClickTeddiFunc()
    end
})

-- Bouncy Toggle and Button
ChalkShelfSection:AddToggle({
    Name = "Auto Click Bouncy",
    Default = false,
    Callback = function(Value)
        autoClickBouncy = Value
        
        spawn(function()
            while autoClickBouncy do
                autoClickBouncyFunc()
                wait(chalkShelfAutoClickSpeed)
            end
        end)
    end
})

ChalkShelfSection:AddButton({
    Name = "Click Bouncy",
    Callback = function()
        autoClickBouncyFunc()
    end
})

-- ChalkShelf Click Speed Slider
ChalkShelfSection:AddSlider({
    Name = "Auto Click Speed",
    Min = 0.01,
    Max = 1,
    Increment = 0.01,
    Default = 0.1,
    Callback = function(Value)
        chalkShelfAutoClickSpeed = Value
    end
})

-- Multi-Player Grab Functionality
local function createMultiPlayerGrabber(section)
    -- Store selected players
    local selectedPlayers = {}
    
    -- Create a dropdown for player selection
    local playerDropdown = section:AddDropdown({
        Name = "üéØ Select Players to Grab",
        Options = {"Loading players..."},
        Default = "Loading players...",
        Callback = function(selectedPlayerName)
            if selectedPlayerName == "" or selectedPlayerName == "Loading players..." then return end
            
            -- Toggle player selection
            if selectedPlayers[selectedPlayerName] then
                selectedPlayers[selectedPlayerName] = nil
            else
                selectedPlayers[selectedPlayerName] = true
            end
            
            -- Update dropdown text to show selected players
            local selectionText = "Selected: " .. (next(selectedPlayers) and 
                table.concat(vim.tbl_keys(selectedPlayers), ", ") or "None")
            playerDropdown:Set(selectionText)
        end
    })
    
    -- Function to update player list
    local function updatePlayerList()
        local playerNames = {}
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer then
                table.insert(playerNames, player.Name)
            end
        end
        
        -- Sort player names
        table.sort(playerNames)
        
        -- If players exist, update dropdown
        if #playerNames > 0 then
            playerDropdown.Options = playerNames
            playerDropdown:Set(playerNames[1])
        else
            playerDropdown.Options = {"No other players"}
            playerDropdown:Set("No other players")
        end
    end
    
    -- Continuous player list update
    game.Players.PlayerAdded:Connect(updatePlayerList)
    game.Players.PlayerRemoving:Connect(updatePlayerList)
    
    -- Initial update
    updatePlayerList()
    
    -- Periodic refresh
    spawn(function()
        while true do
            wait(5)
            updatePlayerList()
        end
    end)
    
    -- Grab button remains the same as in previous implementation
    section:AddButton({
        Name = "ü§≤ Grab Selected Players",
        Callback = function()
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            
            if not rootPart then return end
            
            -- Store initial position
            local initialPosition = rootPart.CFrame
            
            -- Function to grab a player
            local function grabPlayer(targetPlayerName)
                local targetPlayer = game.Players:FindFirstChild(targetPlayerName)
                if not targetPlayer then return end
                
                local targetCharacter = targetPlayer.Character
                if not targetCharacter then return end
                
                local targetRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
                if not targetRootPart then return end
                
                -- Equip snatch
                local snatchTool = character:FindFirstChild("Snatch")
                if not snatchTool then
                    for _, tool in ipairs(player.Backpack:GetChildren()) do
                        if tool.Name == "Snatch" then
                            tool.Parent = character
                            break
                        end
                    end
                end
                
                -- Teleport to player
                rootPart.CFrame = targetRootPart.CFrame * CFrame.new(0, 0, 3)
                
                -- Wait a moment
                wait(0.5)
                
                -- Attempt to snatch
                local snatch = character:FindFirstChild("Snatch")
                if snatch then
                    local clickDetector = snatch:FindFirstChildOfClass("ClickDetector")
                    if clickDetector then
                        fireclickdetector(clickDetector)
                    end
                end
                
                -- Wait a moment
                wait(0.5)
                
                -- Return to initial position
                rootPart.CFrame = initialPosition
            end
            
            -- Grab all selected players
            for playerName, _ in pairs(selectedPlayers) do
                grabPlayer(playerName)
                wait(1)  -- Small delay between grabs
            end
            
            -- Clear selection
            selectedPlayers = {}
            playerDropdown:Set("")
        end
    })
end

-- Add to Daycare Tab
createMultiPlayerGrabber(DaycareTab:AddSection({
    Name = "üèÉ‚Äç‚ôÇÔ∏è Player Grabber"
}))

-- Universal Toggle Loop Management
local function createToggleableLoop(toggleFunction, loopFunction, options)
    options = options or {}
    local waitTime = options.waitTime or 0.1
    local debugPrint = options.debug or false
    
    local isRunning = false
    local currentThread = nil
    
    local function startLoop()
        if not isRunning then
            isRunning = true
            if debugPrint then print("[ToggleLoop] Starting loop") end
            currentThread = task.spawn(function()
                while isRunning do
                    local success, err = pcall(loopFunction)
                    if not success then
                        warn("[ToggleLoop] Error in loop: " .. tostring(err))
                        isRunning = false
                        break
                    end
                    task.wait(waitTime)
                end
                if debugPrint then print("[ToggleLoop] Loop stopped") end
            end)
        end
    end
    
    local function stopLoop()
        if isRunning then
            isRunning = false
            if currentThread then
                task.cancel(currentThread)
                currentThread = nil
                if debugPrint then print("[ToggleLoop] Forcibly stopped loop") end
            end
        end
    end
    
    -- Wrap the original toggle function to manage the loop
    return function()
        local shouldContinue = toggleFunction()
        if shouldContinue then
            startLoop()
        else
            stopLoop()
        end
    end
end

-- Expose the utility globally if needed
_G.createToggleableLoop = createToggleableLoop

-- Universal Tab Search Function
local function addSearchToTab(tab)
    -- Create search input
    local searchBox = Instance.new("TextBox")
    searchBox.Name = "SearchBox"
    searchBox.Size = UDim2.new(1, -20, 0, 35)
    searchBox.Position = UDim2.new(0, 10, 0, 10)
    searchBox.PlaceholderText = "üîç Search functions..."
    searchBox.Text = ""
    searchBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    searchBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    searchBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    searchBox.BorderSizePixel = 0
    searchBox.Font = Enum.Font.Gotham
    searchBox.TextSize = 14
    
    -- Rounded corners
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.2, 0)
    uiCorner.Parent = searchBox
    
    -- Find the tab's content frame
    local function findTabContentFrame(tab)
        for _, child in ipairs(tab.Frame:GetDescendants()) do
            if child:IsA("ScrollingFrame") then
                return child
            end
        end
        return nil
    end
    
    -- Search functionality
    searchBox.Changed:Connect(function(property)
        if property ~= "Text" then return end
        
        local contentFrame = findTabContentFrame(tab)
        if not contentFrame then return end
        
        local searchTerm = string.lower(searchBox.Text)
        
        -- Iterate through all children of the content frame
        for _, child in ipairs(contentFrame:GetChildren()) do
            if child:IsA("Frame") then
                local nameLabel = child:FindFirstChild("Title") or child:FindFirstChild("Name")
                if nameLabel then
                    local elementName = string.lower(nameLabel.Text)
                    child.Visible = searchTerm == "" or elementName:find(searchTerm)
                end
            end
        end
    end)
    
    -- Add to tab
    searchBox.Parent = tab.Frame
    
    return searchBox
end

-- Add search to all tabs after initialization
local function addSearchToAllTabs()
    -- Wait a moment to ensure tabs are fully loaded
    task.wait(1)
    
    local tabs = {
        MainTab,
        DaycareTab,
        TpTab,
        -- Add other tabs as needed
    }
    
    for _, tab in ipairs(tabs) do
        addSearchToTab(tab)
    end
end

-- Call after library initialization
OrionLib:Init()
addSearchToAllTabs()
